Terminals unused in grammar

    ERROR


State 49 conflicts: 1 shift/reduce
State 97 conflicts: 1 shift/reduce


Grammar

    0 $accept: prog $end

    1 prog: decList

    2 decList: decList dec
    3        | dec

    4 dec: varDec
    5    | funcDec

    6 varDec: type ID SEMICOLON
    7       | type ID O_BRACK NUM C_BRACK SEMICOLON

    8 type: INT
    9     | VOID

   10 funcDec: type ID O_PAREN params C_PAREN compStmt

   11 params: paramList
   12       | VOID

   13 paramList: paramList COMMA param
   14          | param

   15 param: type ID
   16      | type ID O_BRACK C_BRACK

   17 compStmt: O_BRACE localDecs stmtList C_BRACE

   18 localDecs: localDecs varDec
   19          | ε

   20 stmtList: stmtList stmt
   21         | ε

   22 stmt: expStmt SEMICOLON
   23     | selecStmt
   24     | iterStmt
   25     | returnStmt

   26 expStmt: exp

   27 selecStmt: IF O_PAREN exp C_PAREN stmt
   28          | IF O_PAREN exp C_PAREN stmt ELSE stmt

   29 iterStmt: WHILE O_PAREN exp C_PAREN stmt

   30 returnStmt: RETURN SEMICOLON
   31           | RETURN exp SEMICOLON

   32 exp: var EQUALS_EQUALS exp
   33    | var EQUALS exp
   34    | simpExp

   35 var: ID
   36    | ID O_BRACK exp C_BRACK

   37 simpExp: addExp relateOp addExp
   38        | addExp

   39 relateOp: LESS_EQUALS
   40         | LESS
   41         | GREATER
   42         | GREATER_EQUALS
   43         | EQUALS_EQUALS
   44         | NOT_EQUALS

   45 addExp: addExp addOp term
   46       | term

   47 addOp: PLUS
   48      | MINUS

   49 term: term mulOp fact
   50     | fact

   51 mulOp: MULT
   52      | DIV

   53 fact: O_PAREN exp C_PAREN
   54     | var
   55     | call
   56     | NUM

   57 call: ID O_PAREN args C_PAREN

   58 args: argList
   59     | ε

   60 argList: argList COMMA exp
   61        | exp


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    PLUS (258) 47
    MULT (259) 51
    MINUS (260) 48
    DIV (261) 52
    O_PAREN (262) 10 27 28 29 53 57
    C_PAREN (263) 10 27 28 29 53 57
    SEMICOLON (264) 6 7 22 30 31
    LESS (265) 40
    LESS_EQUALS (266) 39
    GREATER (267) 41
    GREATER_EQUALS (268) 42
    EQUALS (269) 33
    EQUALS_EQUALS (270) 32 43
    NOT_EQUALS (271) 44
    COMMA (272) 13 60
    O_BRACE (273) 17
    C_BRACE (274) 17
    O_BRACK (275) 7 16 36
    C_BRACK (276) 7 16 36
    IF (277) 27 28
    WHILE (278) 29
    ELSE (279) 28
    INT (280) 8
    RETURN (281) 30 31
    VOID (282) 9 12
    NUM <num> (283) 7 56
    ID <id> (284) 6 7 10 15 16 35 36 57
    ERROR (285)


Nonterminals, with rules where they appear

    $accept (31)
        on left: 0
    prog <decl> (32)
        on left: 1
        on right: 0
    decList <decl> (33)
        on left: 2 3
        on right: 1 2
    dec <decl> (34)
        on left: 4 5
        on right: 2 3
    varDec <decl> (35)
        on left: 6 7
        on right: 4 18
    type <num> (36)
        on left: 8 9
        on right: 6 7 10 15 16
    funcDec <decl> (37)
        on left: 10
        on right: 5
    params <param> (38)
        on left: 11 12
        on right: 10
    paramList <param> (39)
        on left: 13 14
        on right: 11 13
    param <param> (40)
        on left: 15 16
        on right: 13 14
    compStmt <compStmt> (41)
        on left: 17
        on right: 10
    localDecs <decl> (42)
        on left: 18 19
        on right: 17 18
    stmtList <stmt> (43)
        on left: 20 21
        on right: 17 20
    stmt <stmt> (44)
        on left: 22 23 24 25
        on right: 20 27 28 29
    expStmt <stmt> (45)
        on left: 26
        on right: 22
    selecStmt <stmt> (46)
        on left: 27 28
        on right: 23
    iterStmt <stmt> (47)
        on left: 29
        on right: 24
    returnStmt <stmt> (48)
        on left: 30 31
        on right: 25
    exp <expr> (49)
        on left: 32 33 34
        on right: 26 27 28 29 31 32 33 36 53 60 61
    var <var> (50)
        on left: 35 36
        on right: 32 33 54
    simpExp <simple_expr> (51)
        on left: 37 38
        on right: 34
    relateOp <num> (52)
        on left: 39 40 41 42 43 44
        on right: 37
    addExp <add_expr> (53)
        on left: 45 46
        on right: 37 38 45
    addOp <num> (54)
        on left: 47 48
        on right: 45
    term <term> (55)
        on left: 49 50
        on right: 45 46 49
    mulOp <num> (56)
        on left: 51 52
        on right: 49
    fact <factor> (57)
        on left: 53 54 55 56
        on right: 49 50
    call <call> (58)
        on left: 57
        on right: 55
    args <args> (59)
        on left: 58 59
        on right: 57
    argList <argsList> (60)
        on left: 60 61
        on right: 58 60


State 0

    0 $accept: • prog $end

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    prog     go to state 3
    decList  go to state 4
    dec      go to state 5
    varDec   go to state 6
    type     go to state 7
    funcDec  go to state 8


State 1

    8 type: INT •

    $default  reduce using rule 8 (type)


State 2

    9 type: VOID •

    $default  reduce using rule 9 (type)


State 3

    0 $accept: prog • $end

    $end  shift, and go to state 9


State 4

    1 prog: decList •
    2 decList: decList • dec

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    $default  reduce using rule 1 (prog)

    dec      go to state 10
    varDec   go to state 6
    type     go to state 7
    funcDec  go to state 8


State 5

    3 decList: dec •

    $default  reduce using rule 3 (decList)


State 6

    4 dec: varDec •

    $default  reduce using rule 4 (dec)


State 7

    6 varDec: type • ID SEMICOLON
    7       | type • ID O_BRACK NUM C_BRACK SEMICOLON
   10 funcDec: type • ID O_PAREN params C_PAREN compStmt

    ID  shift, and go to state 11


State 8

    5 dec: funcDec •

    $default  reduce using rule 5 (dec)


State 9

    0 $accept: prog $end •

    $default  accept


State 10

    2 decList: decList dec •

    $default  reduce using rule 2 (decList)


State 11

    6 varDec: type ID • SEMICOLON
    7       | type ID • O_BRACK NUM C_BRACK SEMICOLON
   10 funcDec: type ID • O_PAREN params C_PAREN compStmt

    O_PAREN    shift, and go to state 12
    SEMICOLON  shift, and go to state 13
    O_BRACK    shift, and go to state 14


State 12

   10 funcDec: type ID O_PAREN • params C_PAREN compStmt

    INT   shift, and go to state 1
    VOID  shift, and go to state 15

    type       go to state 16
    params     go to state 17
    paramList  go to state 18
    param      go to state 19


State 13

    6 varDec: type ID SEMICOLON •

    $default  reduce using rule 6 (varDec)


State 14

    7 varDec: type ID O_BRACK • NUM C_BRACK SEMICOLON

    NUM  shift, and go to state 20


State 15

    9 type: VOID •
   12 params: VOID •

    C_PAREN   reduce using rule 12 (params)
    $default  reduce using rule 9 (type)


State 16

   15 param: type • ID
   16      | type • ID O_BRACK C_BRACK

    ID  shift, and go to state 21


State 17

   10 funcDec: type ID O_PAREN params • C_PAREN compStmt

    C_PAREN  shift, and go to state 22


State 18

   11 params: paramList •
   13 paramList: paramList • COMMA param

    COMMA  shift, and go to state 23

    $default  reduce using rule 11 (params)


State 19

   14 paramList: param •

    $default  reduce using rule 14 (paramList)


State 20

    7 varDec: type ID O_BRACK NUM • C_BRACK SEMICOLON

    C_BRACK  shift, and go to state 24


State 21

   15 param: type ID •
   16      | type ID • O_BRACK C_BRACK

    O_BRACK  shift, and go to state 25

    $default  reduce using rule 15 (param)


State 22

   10 funcDec: type ID O_PAREN params C_PAREN • compStmt

    O_BRACE  shift, and go to state 26

    compStmt  go to state 27


State 23

   13 paramList: paramList COMMA • param

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    type   go to state 16
    param  go to state 28


State 24

    7 varDec: type ID O_BRACK NUM C_BRACK • SEMICOLON

    SEMICOLON  shift, and go to state 29


State 25

   16 param: type ID O_BRACK • C_BRACK

    C_BRACK  shift, and go to state 30


State 26

   17 compStmt: O_BRACE • localDecs stmtList C_BRACE

    $default  reduce using rule 19 (localDecs)

    localDecs  go to state 31


State 27

   10 funcDec: type ID O_PAREN params C_PAREN compStmt •

    $default  reduce using rule 10 (funcDec)


State 28

   13 paramList: paramList COMMA param •

    $default  reduce using rule 13 (paramList)


State 29

    7 varDec: type ID O_BRACK NUM C_BRACK SEMICOLON •

    $default  reduce using rule 7 (varDec)


State 30

   16 param: type ID O_BRACK C_BRACK •

    $default  reduce using rule 16 (param)


State 31

   17 compStmt: O_BRACE localDecs • stmtList C_BRACE
   18 localDecs: localDecs • varDec

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    $default  reduce using rule 21 (stmtList)

    varDec    go to state 32
    type      go to state 33
    stmtList  go to state 34


State 32

   18 localDecs: localDecs varDec •

    $default  reduce using rule 18 (localDecs)


State 33

    6 varDec: type • ID SEMICOLON
    7       | type • ID O_BRACK NUM C_BRACK SEMICOLON

    ID  shift, and go to state 35


State 34

   17 compStmt: O_BRACE localDecs stmtList • C_BRACE
   20 stmtList: stmtList • stmt

    O_PAREN  shift, and go to state 36
    C_BRACE  shift, and go to state 37
    IF       shift, and go to state 38
    WHILE    shift, and go to state 39
    RETURN   shift, and go to state 40
    NUM      shift, and go to state 41
    ID       shift, and go to state 42

    stmt        go to state 43
    expStmt     go to state 44
    selecStmt   go to state 45
    iterStmt    go to state 46
    returnStmt  go to state 47
    exp         go to state 48
    var         go to state 49
    simpExp     go to state 50
    addExp      go to state 51
    term        go to state 52
    fact        go to state 53
    call        go to state 54


State 35

    6 varDec: type ID • SEMICOLON
    7       | type ID • O_BRACK NUM C_BRACK SEMICOLON

    SEMICOLON  shift, and go to state 13
    O_BRACK    shift, and go to state 14


State 36

   53 fact: O_PAREN • exp C_PAREN

    O_PAREN  shift, and go to state 36
    NUM      shift, and go to state 41
    ID       shift, and go to state 42

    exp      go to state 55
    var      go to state 49
    simpExp  go to state 50
    addExp   go to state 51
    term     go to state 52
    fact     go to state 53
    call     go to state 54


State 37

   17 compStmt: O_BRACE localDecs stmtList C_BRACE •

    $default  reduce using rule 17 (compStmt)


State 38

   27 selecStmt: IF • O_PAREN exp C_PAREN stmt
   28          | IF • O_PAREN exp C_PAREN stmt ELSE stmt

    O_PAREN  shift, and go to state 56


State 39

   29 iterStmt: WHILE • O_PAREN exp C_PAREN stmt

    O_PAREN  shift, and go to state 57


State 40

   30 returnStmt: RETURN • SEMICOLON
   31           | RETURN • exp SEMICOLON

    O_PAREN    shift, and go to state 36
    SEMICOLON  shift, and go to state 58
    NUM        shift, and go to state 41
    ID         shift, and go to state 42

    exp      go to state 59
    var      go to state 49
    simpExp  go to state 50
    addExp   go to state 51
    term     go to state 52
    fact     go to state 53
    call     go to state 54


State 41

   56 fact: NUM •

    $default  reduce using rule 56 (fact)


State 42

   35 var: ID •
   36    | ID • O_BRACK exp C_BRACK
   57 call: ID • O_PAREN args C_PAREN

    O_PAREN  shift, and go to state 60
    O_BRACK  shift, and go to state 61

    $default  reduce using rule 35 (var)


State 43

   20 stmtList: stmtList stmt •

    $default  reduce using rule 20 (stmtList)


State 44

   22 stmt: expStmt • SEMICOLON

    SEMICOLON  shift, and go to state 62


State 45

   23 stmt: selecStmt •

    $default  reduce using rule 23 (stmt)


State 46

   24 stmt: iterStmt •

    $default  reduce using rule 24 (stmt)


State 47

   25 stmt: returnStmt •

    $default  reduce using rule 25 (stmt)


State 48

   26 expStmt: exp •

    $default  reduce using rule 26 (expStmt)


State 49

   32 exp: var • EQUALS_EQUALS exp
   33    | var • EQUALS exp
   54 fact: var •

    EQUALS         shift, and go to state 63
    EQUALS_EQUALS  shift, and go to state 64

    EQUALS_EQUALS  [reduce using rule 54 (fact)]
    $default       reduce using rule 54 (fact)


State 50

   34 exp: simpExp •

    $default  reduce using rule 34 (exp)


State 51

   37 simpExp: addExp • relateOp addExp
   38        | addExp •
   45 addExp: addExp • addOp term

    PLUS            shift, and go to state 65
    MINUS           shift, and go to state 66
    LESS            shift, and go to state 67
    LESS_EQUALS     shift, and go to state 68
    GREATER         shift, and go to state 69
    GREATER_EQUALS  shift, and go to state 70
    EQUALS_EQUALS   shift, and go to state 71
    NOT_EQUALS      shift, and go to state 72

    $default  reduce using rule 38 (simpExp)

    relateOp  go to state 73
    addOp     go to state 74


State 52

   46 addExp: term •
   49 term: term • mulOp fact

    MULT  shift, and go to state 75
    DIV   shift, and go to state 76

    $default  reduce using rule 46 (addExp)

    mulOp  go to state 77


State 53

   50 term: fact •

    $default  reduce using rule 50 (term)


State 54

   55 fact: call •

    $default  reduce using rule 55 (fact)


State 55

   53 fact: O_PAREN exp • C_PAREN

    C_PAREN  shift, and go to state 78


State 56

   27 selecStmt: IF O_PAREN • exp C_PAREN stmt
   28          | IF O_PAREN • exp C_PAREN stmt ELSE stmt

    O_PAREN  shift, and go to state 36
    NUM      shift, and go to state 41
    ID       shift, and go to state 42

    exp      go to state 79
    var      go to state 49
    simpExp  go to state 50
    addExp   go to state 51
    term     go to state 52
    fact     go to state 53
    call     go to state 54


State 57

   29 iterStmt: WHILE O_PAREN • exp C_PAREN stmt

    O_PAREN  shift, and go to state 36
    NUM      shift, and go to state 41
    ID       shift, and go to state 42

    exp      go to state 80
    var      go to state 49
    simpExp  go to state 50
    addExp   go to state 51
    term     go to state 52
    fact     go to state 53
    call     go to state 54


State 58

   30 returnStmt: RETURN SEMICOLON •

    $default  reduce using rule 30 (returnStmt)


State 59

   31 returnStmt: RETURN exp • SEMICOLON

    SEMICOLON  shift, and go to state 81


State 60

   57 call: ID O_PAREN • args C_PAREN

    O_PAREN  shift, and go to state 36
    NUM      shift, and go to state 41
    ID       shift, and go to state 42

    $default  reduce using rule 59 (args)

    exp      go to state 82
    var      go to state 49
    simpExp  go to state 50
    addExp   go to state 51
    term     go to state 52
    fact     go to state 53
    call     go to state 54
    args     go to state 83
    argList  go to state 84


State 61

   36 var: ID O_BRACK • exp C_BRACK

    O_PAREN  shift, and go to state 36
    NUM      shift, and go to state 41
    ID       shift, and go to state 42

    exp      go to state 85
    var      go to state 49
    simpExp  go to state 50
    addExp   go to state 51
    term     go to state 52
    fact     go to state 53
    call     go to state 54


State 62

   22 stmt: expStmt SEMICOLON •

    $default  reduce using rule 22 (stmt)


State 63

   33 exp: var EQUALS • exp

    O_PAREN  shift, and go to state 36
    NUM      shift, and go to state 41
    ID       shift, and go to state 42

    exp      go to state 86
    var      go to state 49
    simpExp  go to state 50
    addExp   go to state 51
    term     go to state 52
    fact     go to state 53
    call     go to state 54


State 64

   32 exp: var EQUALS_EQUALS • exp

    O_PAREN  shift, and go to state 36
    NUM      shift, and go to state 41
    ID       shift, and go to state 42

    exp      go to state 87
    var      go to state 49
    simpExp  go to state 50
    addExp   go to state 51
    term     go to state 52
    fact     go to state 53
    call     go to state 54


State 65

   47 addOp: PLUS •

    $default  reduce using rule 47 (addOp)


State 66

   48 addOp: MINUS •

    $default  reduce using rule 48 (addOp)


State 67

   40 relateOp: LESS •

    $default  reduce using rule 40 (relateOp)


State 68

   39 relateOp: LESS_EQUALS •

    $default  reduce using rule 39 (relateOp)


State 69

   41 relateOp: GREATER •

    $default  reduce using rule 41 (relateOp)


State 70

   42 relateOp: GREATER_EQUALS •

    $default  reduce using rule 42 (relateOp)


State 71

   43 relateOp: EQUALS_EQUALS •

    $default  reduce using rule 43 (relateOp)


State 72

   44 relateOp: NOT_EQUALS •

    $default  reduce using rule 44 (relateOp)


State 73

   37 simpExp: addExp relateOp • addExp

    O_PAREN  shift, and go to state 36
    NUM      shift, and go to state 41
    ID       shift, and go to state 42

    var     go to state 88
    addExp  go to state 89
    term    go to state 52
    fact    go to state 53
    call    go to state 54


State 74

   45 addExp: addExp addOp • term

    O_PAREN  shift, and go to state 36
    NUM      shift, and go to state 41
    ID       shift, and go to state 42

    var   go to state 88
    term  go to state 90
    fact  go to state 53
    call  go to state 54


State 75

   51 mulOp: MULT •

    $default  reduce using rule 51 (mulOp)


State 76

   52 mulOp: DIV •

    $default  reduce using rule 52 (mulOp)


State 77

   49 term: term mulOp • fact

    O_PAREN  shift, and go to state 36
    NUM      shift, and go to state 41
    ID       shift, and go to state 42

    var   go to state 88
    fact  go to state 91
    call  go to state 54


State 78

   53 fact: O_PAREN exp C_PAREN •

    $default  reduce using rule 53 (fact)


State 79

   27 selecStmt: IF O_PAREN exp • C_PAREN stmt
   28          | IF O_PAREN exp • C_PAREN stmt ELSE stmt

    C_PAREN  shift, and go to state 92


State 80

   29 iterStmt: WHILE O_PAREN exp • C_PAREN stmt

    C_PAREN  shift, and go to state 93


State 81

   31 returnStmt: RETURN exp SEMICOLON •

    $default  reduce using rule 31 (returnStmt)


State 82

   61 argList: exp •

    $default  reduce using rule 61 (argList)


State 83

   57 call: ID O_PAREN args • C_PAREN

    C_PAREN  shift, and go to state 94


State 84

   58 args: argList •
   60 argList: argList • COMMA exp

    COMMA  shift, and go to state 95

    $default  reduce using rule 58 (args)


State 85

   36 var: ID O_BRACK exp • C_BRACK

    C_BRACK  shift, and go to state 96


State 86

   33 exp: var EQUALS exp •

    $default  reduce using rule 33 (exp)


State 87

   32 exp: var EQUALS_EQUALS exp •

    $default  reduce using rule 32 (exp)


State 88

   54 fact: var •

    $default  reduce using rule 54 (fact)


State 89

   37 simpExp: addExp relateOp addExp •
   45 addExp: addExp • addOp term

    PLUS   shift, and go to state 65
    MINUS  shift, and go to state 66

    $default  reduce using rule 37 (simpExp)

    addOp  go to state 74


State 90

   45 addExp: addExp addOp term •
   49 term: term • mulOp fact

    MULT  shift, and go to state 75
    DIV   shift, and go to state 76

    $default  reduce using rule 45 (addExp)

    mulOp  go to state 77


State 91

   49 term: term mulOp fact •

    $default  reduce using rule 49 (term)


State 92

   27 selecStmt: IF O_PAREN exp C_PAREN • stmt
   28          | IF O_PAREN exp C_PAREN • stmt ELSE stmt

    O_PAREN  shift, and go to state 36
    IF       shift, and go to state 38
    WHILE    shift, and go to state 39
    RETURN   shift, and go to state 40
    NUM      shift, and go to state 41
    ID       shift, and go to state 42

    stmt        go to state 97
    expStmt     go to state 44
    selecStmt   go to state 45
    iterStmt    go to state 46
    returnStmt  go to state 47
    exp         go to state 48
    var         go to state 49
    simpExp     go to state 50
    addExp      go to state 51
    term        go to state 52
    fact        go to state 53
    call        go to state 54


State 93

   29 iterStmt: WHILE O_PAREN exp C_PAREN • stmt

    O_PAREN  shift, and go to state 36
    IF       shift, and go to state 38
    WHILE    shift, and go to state 39
    RETURN   shift, and go to state 40
    NUM      shift, and go to state 41
    ID       shift, and go to state 42

    stmt        go to state 98
    expStmt     go to state 44
    selecStmt   go to state 45
    iterStmt    go to state 46
    returnStmt  go to state 47
    exp         go to state 48
    var         go to state 49
    simpExp     go to state 50
    addExp      go to state 51
    term        go to state 52
    fact        go to state 53
    call        go to state 54


State 94

   57 call: ID O_PAREN args C_PAREN •

    $default  reduce using rule 57 (call)


State 95

   60 argList: argList COMMA • exp

    O_PAREN  shift, and go to state 36
    NUM      shift, and go to state 41
    ID       shift, and go to state 42

    exp      go to state 99
    var      go to state 49
    simpExp  go to state 50
    addExp   go to state 51
    term     go to state 52
    fact     go to state 53
    call     go to state 54


State 96

   36 var: ID O_BRACK exp C_BRACK •

    $default  reduce using rule 36 (var)


State 97

   27 selecStmt: IF O_PAREN exp C_PAREN stmt •
   28          | IF O_PAREN exp C_PAREN stmt • ELSE stmt

    ELSE  shift, and go to state 100

    ELSE      [reduce using rule 27 (selecStmt)]
    $default  reduce using rule 27 (selecStmt)


State 98

   29 iterStmt: WHILE O_PAREN exp C_PAREN stmt •

    $default  reduce using rule 29 (iterStmt)


State 99

   60 argList: argList COMMA exp •

    $default  reduce using rule 60 (argList)


State 100

   28 selecStmt: IF O_PAREN exp C_PAREN stmt ELSE • stmt

    O_PAREN  shift, and go to state 36
    IF       shift, and go to state 38
    WHILE    shift, and go to state 39
    RETURN   shift, and go to state 40
    NUM      shift, and go to state 41
    ID       shift, and go to state 42

    stmt        go to state 101
    expStmt     go to state 44
    selecStmt   go to state 45
    iterStmt    go to state 46
    returnStmt  go to state 47
    exp         go to state 48
    var         go to state 49
    simpExp     go to state 50
    addExp      go to state 51
    term        go to state 52
    fact        go to state 53
    call        go to state 54


State 101

   28 selecStmt: IF O_PAREN exp C_PAREN stmt ELSE stmt •

    $default  reduce using rule 28 (selecStmt)
