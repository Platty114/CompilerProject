Terminals unused in grammar

    ERROR


State 48 conflicts: 1 shift/reduce
State 99 conflicts: 1 shift/reduce


Grammar

    0 $accept: prog $end

    1 prog: decList

    2 decList: decList dec
    3        | dec

    4 dec: varDec
    5    | funcDec

    6 varDec: type ID SEMICOLON
    7       | type ID O_BRACK NUM C_BRACK SEMICOLON

    8 type: INT
    9     | VOID

   10 funcDec: type ID O_PAREN params C_PAREN compStmt

   11 params: paramList
   12       | VOID

   13 paramList: paramList COMMA param
   14          | param

   15 param: type ID
   16      | type ID O_BRACK C_BRACK

   17 compStmt: O_BRACE localDecs stmtList C_BRACE
   18         | O_BRACE localDecs C_BRACE

   19 localDecs: localDecs varDec
   20          | ε

   21 stmtList: stmtList stmt
   22         | stmt

   23 stmt: expStmt SEMICOLON
   24     | selecStmt
   25     | iterStmt
   26     | returnStmt

   27 expStmt: exp

   28 selecStmt: IF O_PAREN exp C_PAREN stmt
   29          | IF O_PAREN exp C_PAREN stmt ELSE stmt

   30 iterStmt: WHILE O_PAREN exp C_PAREN stmt

   31 returnStmt: RETURN SEMICOLON
   32           | RETURN exp SEMICOLON

   33 exp: var EQUALS_EQUALS exp
   34    | var EQUALS exp
   35    | simpExp

   36 var: ID
   37    | ID O_BRACK exp C_BRACK

   38 simpExp: addExp relateOp addExp
   39        | addExp

   40 relateOp: LESS_EQUALS
   41         | LESS
   42         | GREATER
   43         | GREATER_EQUALS
   44         | EQUALS_EQUALS
   45         | NOT_EQUALS

   46 addExp: addExp addOp term
   47       | term

   48 addOp: PLUS
   49      | MINUS

   50 term: term mulOp fact
   51     | fact

   52 mulOp: MULT
   53      | DIV

   54 fact: O_PAREN exp C_PAREN
   55     | var
   56     | call
   57     | NUM

   58 call: ID O_PAREN args C_PAREN

   59 args: argList
   60     | ε

   61 argList: argList COMMA exp
   62        | exp


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    PLUS (258) 48
    MULT (259) 52
    MINUS (260) 49
    DIV (261) 53
    O_PAREN (262) 10 28 29 30 54 58
    C_PAREN (263) 10 28 29 30 54 58
    SEMICOLON (264) 6 7 23 31 32
    LESS (265) 41
    LESS_EQUALS (266) 40
    GREATER (267) 42
    GREATER_EQUALS (268) 43
    EQUALS (269) 34
    EQUALS_EQUALS (270) 33 44
    NOT_EQUALS (271) 45
    COMMA (272) 13 61
    O_BRACE (273) 17 18
    C_BRACE (274) 17 18
    O_BRACK (275) 7 16 37
    C_BRACK (276) 7 16 37
    IF (277) 28 29
    WHILE (278) 30
    ELSE (279) 29
    INT (280) 8
    RETURN (281) 31 32
    VOID (282) 9 12
    NUM <num> (283) 7 57
    ID <id> (284) 6 7 10 15 16 36 37 58
    ERROR (285)


Nonterminals, with rules where they appear

    $accept (31)
        on left: 0
    prog <decl> (32)
        on left: 1
        on right: 0
    decList <decl> (33)
        on left: 2 3
        on right: 1 2
    dec <decl> (34)
        on left: 4 5
        on right: 2 3
    varDec <decl> (35)
        on left: 6 7
        on right: 4 19
    type <num> (36)
        on left: 8 9
        on right: 6 7 10 15 16
    funcDec <decl> (37)
        on left: 10
        on right: 5
    params <param> (38)
        on left: 11 12
        on right: 10
    paramList <param> (39)
        on left: 13 14
        on right: 11 13
    param <param> (40)
        on left: 15 16
        on right: 13 14
    compStmt <compStmt> (41)
        on left: 17 18
        on right: 10
    localDecs <decl> (42)
        on left: 19 20
        on right: 17 18 19
    stmtList <stmt> (43)
        on left: 21 22
        on right: 17 21
    stmt <stmt> (44)
        on left: 23 24 25 26
        on right: 21 22 28 29 30
    expStmt <stmt> (45)
        on left: 27
        on right: 23
    selecStmt <stmt> (46)
        on left: 28 29
        on right: 24
    iterStmt <stmt> (47)
        on left: 30
        on right: 25
    returnStmt <stmt> (48)
        on left: 31 32
        on right: 26
    exp <expr> (49)
        on left: 33 34 35
        on right: 27 28 29 30 32 33 34 37 54 61 62
    var <var> (50)
        on left: 36 37
        on right: 33 34 55
    simpExp <simple_expr> (51)
        on left: 38 39
        on right: 35
    relateOp <num> (52)
        on left: 40 41 42 43 44 45
        on right: 38
    addExp <add_expr> (53)
        on left: 46 47
        on right: 38 39 46
    addOp <num> (54)
        on left: 48 49
        on right: 46
    term <term> (55)
        on left: 50 51
        on right: 46 47 50
    mulOp <num> (56)
        on left: 52 53
        on right: 50
    fact <factor> (57)
        on left: 54 55 56 57
        on right: 50 51
    call <call> (58)
        on left: 58
        on right: 56
    args <args> (59)
        on left: 59 60
        on right: 58
    argList <argsList> (60)
        on left: 61 62
        on right: 59 61


State 0

    0 $accept: • prog $end

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    prog     go to state 3
    decList  go to state 4
    dec      go to state 5
    varDec   go to state 6
    type     go to state 7
    funcDec  go to state 8


State 1

    8 type: INT •

    $default  reduce using rule 8 (type)


State 2

    9 type: VOID •

    $default  reduce using rule 9 (type)


State 3

    0 $accept: prog • $end

    $end  shift, and go to state 9


State 4

    1 prog: decList •
    2 decList: decList • dec

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    $default  reduce using rule 1 (prog)

    dec      go to state 10
    varDec   go to state 6
    type     go to state 7
    funcDec  go to state 8


State 5

    3 decList: dec •

    $default  reduce using rule 3 (decList)


State 6

    4 dec: varDec •

    $default  reduce using rule 4 (dec)


State 7

    6 varDec: type • ID SEMICOLON
    7       | type • ID O_BRACK NUM C_BRACK SEMICOLON
   10 funcDec: type • ID O_PAREN params C_PAREN compStmt

    ID  shift, and go to state 11


State 8

    5 dec: funcDec •

    $default  reduce using rule 5 (dec)


State 9

    0 $accept: prog $end •

    $default  accept


State 10

    2 decList: decList dec •

    $default  reduce using rule 2 (decList)


State 11

    6 varDec: type ID • SEMICOLON
    7       | type ID • O_BRACK NUM C_BRACK SEMICOLON
   10 funcDec: type ID • O_PAREN params C_PAREN compStmt

    O_PAREN    shift, and go to state 12
    SEMICOLON  shift, and go to state 13
    O_BRACK    shift, and go to state 14


State 12

   10 funcDec: type ID O_PAREN • params C_PAREN compStmt

    INT   shift, and go to state 1
    VOID  shift, and go to state 15

    type       go to state 16
    params     go to state 17
    paramList  go to state 18
    param      go to state 19


State 13

    6 varDec: type ID SEMICOLON •

    $default  reduce using rule 6 (varDec)


State 14

    7 varDec: type ID O_BRACK • NUM C_BRACK SEMICOLON

    NUM  shift, and go to state 20


State 15

    9 type: VOID •
   12 params: VOID •

    C_PAREN   reduce using rule 12 (params)
    $default  reduce using rule 9 (type)


State 16

   15 param: type • ID
   16      | type • ID O_BRACK C_BRACK

    ID  shift, and go to state 21


State 17

   10 funcDec: type ID O_PAREN params • C_PAREN compStmt

    C_PAREN  shift, and go to state 22


State 18

   11 params: paramList •
   13 paramList: paramList • COMMA param

    COMMA  shift, and go to state 23

    $default  reduce using rule 11 (params)


State 19

   14 paramList: param •

    $default  reduce using rule 14 (paramList)


State 20

    7 varDec: type ID O_BRACK NUM • C_BRACK SEMICOLON

    C_BRACK  shift, and go to state 24


State 21

   15 param: type ID •
   16      | type ID • O_BRACK C_BRACK

    O_BRACK  shift, and go to state 25

    $default  reduce using rule 15 (param)


State 22

   10 funcDec: type ID O_PAREN params C_PAREN • compStmt

    O_BRACE  shift, and go to state 26

    compStmt  go to state 27


State 23

   13 paramList: paramList COMMA • param

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    type   go to state 16
    param  go to state 28


State 24

    7 varDec: type ID O_BRACK NUM C_BRACK • SEMICOLON

    SEMICOLON  shift, and go to state 29


State 25

   16 param: type ID O_BRACK • C_BRACK

    C_BRACK  shift, and go to state 30


State 26

   17 compStmt: O_BRACE • localDecs stmtList C_BRACE
   18         | O_BRACE • localDecs C_BRACE

    $default  reduce using rule 20 (localDecs)

    localDecs  go to state 31


State 27

   10 funcDec: type ID O_PAREN params C_PAREN compStmt •

    $default  reduce using rule 10 (funcDec)


State 28

   13 paramList: paramList COMMA param •

    $default  reduce using rule 13 (paramList)


State 29

    7 varDec: type ID O_BRACK NUM C_BRACK SEMICOLON •

    $default  reduce using rule 7 (varDec)


State 30

   16 param: type ID O_BRACK C_BRACK •

    $default  reduce using rule 16 (param)


State 31

   17 compStmt: O_BRACE localDecs • stmtList C_BRACE
   18         | O_BRACE localDecs • C_BRACE
   19 localDecs: localDecs • varDec

    O_PAREN  shift, and go to state 32
    C_BRACE  shift, and go to state 33
    IF       shift, and go to state 34
    WHILE    shift, and go to state 35
    INT      shift, and go to state 1
    RETURN   shift, and go to state 36
    VOID     shift, and go to state 2
    NUM      shift, and go to state 37
    ID       shift, and go to state 38

    varDec      go to state 39
    type        go to state 40
    stmtList    go to state 41
    stmt        go to state 42
    expStmt     go to state 43
    selecStmt   go to state 44
    iterStmt    go to state 45
    returnStmt  go to state 46
    exp         go to state 47
    var         go to state 48
    simpExp     go to state 49
    addExp      go to state 50
    term        go to state 51
    fact        go to state 52
    call        go to state 53


State 32

   54 fact: O_PAREN • exp C_PAREN

    O_PAREN  shift, and go to state 32
    NUM      shift, and go to state 37
    ID       shift, and go to state 38

    exp      go to state 54
    var      go to state 48
    simpExp  go to state 49
    addExp   go to state 50
    term     go to state 51
    fact     go to state 52
    call     go to state 53


State 33

   18 compStmt: O_BRACE localDecs C_BRACE •

    $default  reduce using rule 18 (compStmt)


State 34

   28 selecStmt: IF • O_PAREN exp C_PAREN stmt
   29          | IF • O_PAREN exp C_PAREN stmt ELSE stmt

    O_PAREN  shift, and go to state 55


State 35

   30 iterStmt: WHILE • O_PAREN exp C_PAREN stmt

    O_PAREN  shift, and go to state 56


State 36

   31 returnStmt: RETURN • SEMICOLON
   32           | RETURN • exp SEMICOLON

    O_PAREN    shift, and go to state 32
    SEMICOLON  shift, and go to state 57
    NUM        shift, and go to state 37
    ID         shift, and go to state 38

    exp      go to state 58
    var      go to state 48
    simpExp  go to state 49
    addExp   go to state 50
    term     go to state 51
    fact     go to state 52
    call     go to state 53


State 37

   57 fact: NUM •

    $default  reduce using rule 57 (fact)


State 38

   36 var: ID •
   37    | ID • O_BRACK exp C_BRACK
   58 call: ID • O_PAREN args C_PAREN

    O_PAREN  shift, and go to state 59
    O_BRACK  shift, and go to state 60

    $default  reduce using rule 36 (var)


State 39

   19 localDecs: localDecs varDec •

    $default  reduce using rule 19 (localDecs)


State 40

    6 varDec: type • ID SEMICOLON
    7       | type • ID O_BRACK NUM C_BRACK SEMICOLON

    ID  shift, and go to state 61


State 41

   17 compStmt: O_BRACE localDecs stmtList • C_BRACE
   21 stmtList: stmtList • stmt

    O_PAREN  shift, and go to state 32
    C_BRACE  shift, and go to state 62
    IF       shift, and go to state 34
    WHILE    shift, and go to state 35
    RETURN   shift, and go to state 36
    NUM      shift, and go to state 37
    ID       shift, and go to state 38

    stmt        go to state 63
    expStmt     go to state 43
    selecStmt   go to state 44
    iterStmt    go to state 45
    returnStmt  go to state 46
    exp         go to state 47
    var         go to state 48
    simpExp     go to state 49
    addExp      go to state 50
    term        go to state 51
    fact        go to state 52
    call        go to state 53


State 42

   22 stmtList: stmt •

    $default  reduce using rule 22 (stmtList)


State 43

   23 stmt: expStmt • SEMICOLON

    SEMICOLON  shift, and go to state 64


State 44

   24 stmt: selecStmt •

    $default  reduce using rule 24 (stmt)


State 45

   25 stmt: iterStmt •

    $default  reduce using rule 25 (stmt)


State 46

   26 stmt: returnStmt •

    $default  reduce using rule 26 (stmt)


State 47

   27 expStmt: exp •

    $default  reduce using rule 27 (expStmt)


State 48

   33 exp: var • EQUALS_EQUALS exp
   34    | var • EQUALS exp
   55 fact: var •

    EQUALS         shift, and go to state 65
    EQUALS_EQUALS  shift, and go to state 66

    EQUALS_EQUALS  [reduce using rule 55 (fact)]
    $default       reduce using rule 55 (fact)


State 49

   35 exp: simpExp •

    $default  reduce using rule 35 (exp)


State 50

   38 simpExp: addExp • relateOp addExp
   39        | addExp •
   46 addExp: addExp • addOp term

    PLUS            shift, and go to state 67
    MINUS           shift, and go to state 68
    LESS            shift, and go to state 69
    LESS_EQUALS     shift, and go to state 70
    GREATER         shift, and go to state 71
    GREATER_EQUALS  shift, and go to state 72
    EQUALS_EQUALS   shift, and go to state 73
    NOT_EQUALS      shift, and go to state 74

    $default  reduce using rule 39 (simpExp)

    relateOp  go to state 75
    addOp     go to state 76


State 51

   47 addExp: term •
   50 term: term • mulOp fact

    MULT  shift, and go to state 77
    DIV   shift, and go to state 78

    $default  reduce using rule 47 (addExp)

    mulOp  go to state 79


State 52

   51 term: fact •

    $default  reduce using rule 51 (term)


State 53

   56 fact: call •

    $default  reduce using rule 56 (fact)


State 54

   54 fact: O_PAREN exp • C_PAREN

    C_PAREN  shift, and go to state 80


State 55

   28 selecStmt: IF O_PAREN • exp C_PAREN stmt
   29          | IF O_PAREN • exp C_PAREN stmt ELSE stmt

    O_PAREN  shift, and go to state 32
    NUM      shift, and go to state 37
    ID       shift, and go to state 38

    exp      go to state 81
    var      go to state 48
    simpExp  go to state 49
    addExp   go to state 50
    term     go to state 51
    fact     go to state 52
    call     go to state 53


State 56

   30 iterStmt: WHILE O_PAREN • exp C_PAREN stmt

    O_PAREN  shift, and go to state 32
    NUM      shift, and go to state 37
    ID       shift, and go to state 38

    exp      go to state 82
    var      go to state 48
    simpExp  go to state 49
    addExp   go to state 50
    term     go to state 51
    fact     go to state 52
    call     go to state 53


State 57

   31 returnStmt: RETURN SEMICOLON •

    $default  reduce using rule 31 (returnStmt)


State 58

   32 returnStmt: RETURN exp • SEMICOLON

    SEMICOLON  shift, and go to state 83


State 59

   58 call: ID O_PAREN • args C_PAREN

    O_PAREN  shift, and go to state 32
    NUM      shift, and go to state 37
    ID       shift, and go to state 38

    $default  reduce using rule 60 (args)

    exp      go to state 84
    var      go to state 48
    simpExp  go to state 49
    addExp   go to state 50
    term     go to state 51
    fact     go to state 52
    call     go to state 53
    args     go to state 85
    argList  go to state 86


State 60

   37 var: ID O_BRACK • exp C_BRACK

    O_PAREN  shift, and go to state 32
    NUM      shift, and go to state 37
    ID       shift, and go to state 38

    exp      go to state 87
    var      go to state 48
    simpExp  go to state 49
    addExp   go to state 50
    term     go to state 51
    fact     go to state 52
    call     go to state 53


State 61

    6 varDec: type ID • SEMICOLON
    7       | type ID • O_BRACK NUM C_BRACK SEMICOLON

    SEMICOLON  shift, and go to state 13
    O_BRACK    shift, and go to state 14


State 62

   17 compStmt: O_BRACE localDecs stmtList C_BRACE •

    $default  reduce using rule 17 (compStmt)


State 63

   21 stmtList: stmtList stmt •

    $default  reduce using rule 21 (stmtList)


State 64

   23 stmt: expStmt SEMICOLON •

    $default  reduce using rule 23 (stmt)


State 65

   34 exp: var EQUALS • exp

    O_PAREN  shift, and go to state 32
    NUM      shift, and go to state 37
    ID       shift, and go to state 38

    exp      go to state 88
    var      go to state 48
    simpExp  go to state 49
    addExp   go to state 50
    term     go to state 51
    fact     go to state 52
    call     go to state 53


State 66

   33 exp: var EQUALS_EQUALS • exp

    O_PAREN  shift, and go to state 32
    NUM      shift, and go to state 37
    ID       shift, and go to state 38

    exp      go to state 89
    var      go to state 48
    simpExp  go to state 49
    addExp   go to state 50
    term     go to state 51
    fact     go to state 52
    call     go to state 53


State 67

   48 addOp: PLUS •

    $default  reduce using rule 48 (addOp)


State 68

   49 addOp: MINUS •

    $default  reduce using rule 49 (addOp)


State 69

   41 relateOp: LESS •

    $default  reduce using rule 41 (relateOp)


State 70

   40 relateOp: LESS_EQUALS •

    $default  reduce using rule 40 (relateOp)


State 71

   42 relateOp: GREATER •

    $default  reduce using rule 42 (relateOp)


State 72

   43 relateOp: GREATER_EQUALS •

    $default  reduce using rule 43 (relateOp)


State 73

   44 relateOp: EQUALS_EQUALS •

    $default  reduce using rule 44 (relateOp)


State 74

   45 relateOp: NOT_EQUALS •

    $default  reduce using rule 45 (relateOp)


State 75

   38 simpExp: addExp relateOp • addExp

    O_PAREN  shift, and go to state 32
    NUM      shift, and go to state 37
    ID       shift, and go to state 38

    var     go to state 90
    addExp  go to state 91
    term    go to state 51
    fact    go to state 52
    call    go to state 53


State 76

   46 addExp: addExp addOp • term

    O_PAREN  shift, and go to state 32
    NUM      shift, and go to state 37
    ID       shift, and go to state 38

    var   go to state 90
    term  go to state 92
    fact  go to state 52
    call  go to state 53


State 77

   52 mulOp: MULT •

    $default  reduce using rule 52 (mulOp)


State 78

   53 mulOp: DIV •

    $default  reduce using rule 53 (mulOp)


State 79

   50 term: term mulOp • fact

    O_PAREN  shift, and go to state 32
    NUM      shift, and go to state 37
    ID       shift, and go to state 38

    var   go to state 90
    fact  go to state 93
    call  go to state 53


State 80

   54 fact: O_PAREN exp C_PAREN •

    $default  reduce using rule 54 (fact)


State 81

   28 selecStmt: IF O_PAREN exp • C_PAREN stmt
   29          | IF O_PAREN exp • C_PAREN stmt ELSE stmt

    C_PAREN  shift, and go to state 94


State 82

   30 iterStmt: WHILE O_PAREN exp • C_PAREN stmt

    C_PAREN  shift, and go to state 95


State 83

   32 returnStmt: RETURN exp SEMICOLON •

    $default  reduce using rule 32 (returnStmt)


State 84

   62 argList: exp •

    $default  reduce using rule 62 (argList)


State 85

   58 call: ID O_PAREN args • C_PAREN

    C_PAREN  shift, and go to state 96


State 86

   59 args: argList •
   61 argList: argList • COMMA exp

    COMMA  shift, and go to state 97

    $default  reduce using rule 59 (args)


State 87

   37 var: ID O_BRACK exp • C_BRACK

    C_BRACK  shift, and go to state 98


State 88

   34 exp: var EQUALS exp •

    $default  reduce using rule 34 (exp)


State 89

   33 exp: var EQUALS_EQUALS exp •

    $default  reduce using rule 33 (exp)


State 90

   55 fact: var •

    $default  reduce using rule 55 (fact)


State 91

   38 simpExp: addExp relateOp addExp •
   46 addExp: addExp • addOp term

    PLUS   shift, and go to state 67
    MINUS  shift, and go to state 68

    $default  reduce using rule 38 (simpExp)

    addOp  go to state 76


State 92

   46 addExp: addExp addOp term •
   50 term: term • mulOp fact

    MULT  shift, and go to state 77
    DIV   shift, and go to state 78

    $default  reduce using rule 46 (addExp)

    mulOp  go to state 79


State 93

   50 term: term mulOp fact •

    $default  reduce using rule 50 (term)


State 94

   28 selecStmt: IF O_PAREN exp C_PAREN • stmt
   29          | IF O_PAREN exp C_PAREN • stmt ELSE stmt

    O_PAREN  shift, and go to state 32
    IF       shift, and go to state 34
    WHILE    shift, and go to state 35
    RETURN   shift, and go to state 36
    NUM      shift, and go to state 37
    ID       shift, and go to state 38

    stmt        go to state 99
    expStmt     go to state 43
    selecStmt   go to state 44
    iterStmt    go to state 45
    returnStmt  go to state 46
    exp         go to state 47
    var         go to state 48
    simpExp     go to state 49
    addExp      go to state 50
    term        go to state 51
    fact        go to state 52
    call        go to state 53


State 95

   30 iterStmt: WHILE O_PAREN exp C_PAREN • stmt

    O_PAREN  shift, and go to state 32
    IF       shift, and go to state 34
    WHILE    shift, and go to state 35
    RETURN   shift, and go to state 36
    NUM      shift, and go to state 37
    ID       shift, and go to state 38

    stmt        go to state 100
    expStmt     go to state 43
    selecStmt   go to state 44
    iterStmt    go to state 45
    returnStmt  go to state 46
    exp         go to state 47
    var         go to state 48
    simpExp     go to state 49
    addExp      go to state 50
    term        go to state 51
    fact        go to state 52
    call        go to state 53


State 96

   58 call: ID O_PAREN args C_PAREN •

    $default  reduce using rule 58 (call)


State 97

   61 argList: argList COMMA • exp

    O_PAREN  shift, and go to state 32
    NUM      shift, and go to state 37
    ID       shift, and go to state 38

    exp      go to state 101
    var      go to state 48
    simpExp  go to state 49
    addExp   go to state 50
    term     go to state 51
    fact     go to state 52
    call     go to state 53


State 98

   37 var: ID O_BRACK exp C_BRACK •

    $default  reduce using rule 37 (var)


State 99

   28 selecStmt: IF O_PAREN exp C_PAREN stmt •
   29          | IF O_PAREN exp C_PAREN stmt • ELSE stmt

    ELSE  shift, and go to state 102

    ELSE      [reduce using rule 28 (selecStmt)]
    $default  reduce using rule 28 (selecStmt)


State 100

   30 iterStmt: WHILE O_PAREN exp C_PAREN stmt •

    $default  reduce using rule 30 (iterStmt)


State 101

   61 argList: argList COMMA exp •

    $default  reduce using rule 61 (argList)


State 102

   29 selecStmt: IF O_PAREN exp C_PAREN stmt ELSE • stmt

    O_PAREN  shift, and go to state 32
    IF       shift, and go to state 34
    WHILE    shift, and go to state 35
    RETURN   shift, and go to state 36
    NUM      shift, and go to state 37
    ID       shift, and go to state 38

    stmt        go to state 103
    expStmt     go to state 43
    selecStmt   go to state 44
    iterStmt    go to state 45
    returnStmt  go to state 46
    exp         go to state 47
    var         go to state 48
    simpExp     go to state 49
    addExp      go to state 50
    term        go to state 51
    fact        go to state 52
    call        go to state 53


State 103

   29 selecStmt: IF O_PAREN exp C_PAREN stmt ELSE stmt •

    $default  reduce using rule 29 (selecStmt)
